// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract NFT is ERC721Enumerable, Ownable {
    using Strings for uint256;
    uint public mintFee = 0.05 ether;
    uint public maxSupply;
    bool public presale = true;
    bool public revealed = false;
    string baseURI;
    string public baseExtension = ".json";
    string public notRevealedUri;
    mapping(address => bool) public whitelisted;
    address[] private _whitelistAddresses;

    constructor(
        uint _maxSupply,
        string memory _initBaseURI,
        string memory _initNotRevealedUri,
        address[] memory _whitelist
    ) ERC721("Snifty NFT", "SNFT") {
        maxSupply = _maxSupply;
        _whitelistAddresses = _whitelist;
        setBaseURI(_initBaseURI);
        setNotRevealedURI(_initNotRevealedUri);

        for(uint i=0; i< _whitelist.length; i++) {
            whitelisted[_whitelist[i]] = true;
        }
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }
    
    // public
    function mint(address _to, uint256 _mintAmount) external payable returns (uint[] memory) {
        uint256 supply = totalSupply();
        require(_mintAmount > 0);
        require(supply + _mintAmount <= maxSupply);
        require(msg.value >= mintFee * _mintAmount);
        
        if(presale && msg.sender != owner()){
            require(whitelisted[msg.sender]);
        }
        uint[] memory tokens = new uint[](_mintAmount);
        for (uint256 i = 1; i <= _mintAmount; i++) {
            _safeMint(_to, supply + i);
            tokens[i-1] = supply + i;
        }
        
        return tokens;
    }

    function endPresale() external onlyOwner {
        presale = false;
    }

    function walletOfOwner(address _owner) external view returns (uint256[] memory) {
        uint256 ownerTokenCount = balanceOf(_owner);
        uint256[] memory tokenIds = new uint256[](ownerTokenCount);
        for (uint256 i; i < ownerTokenCount; i++) {
        tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
        }
        return tokenIds;
    }

    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(
        _exists(tokenId),
        "ERC721Metadata: URI query for nonexistent token"
        );
        
        if(revealed == false) {
            return notRevealedUri;
        }

        string memory currentBaseURI = _baseURI();
        return bytes(currentBaseURI).length > 0
            ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))
            : "";
    }

    function reveal() external onlyOwner {
        revealed = true;
    }
    
    function setmintFee(uint256 _newmintFee) public onlyOwner {
        mintFee = _newmintFee;
    }

    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
        notRevealedUri = _notRevealedURI;
    }

    function setBaseURI(string memory _newBaseURI) public onlyOwner {
        baseURI = _newBaseURI;
    }

    function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
        baseExtension = _newBaseExtension;
    }

    function getWhitelistedAddresses() external view returns (address[] memory) {
        return _whitelistAddresses;
    }

    function addWhitelistedAddress(address _address) public onlyOwner returns (bool) {
        whitelisted[_address] = true;
        _whitelistAddresses.push(_address);
        return true;
    }

    function removeWhitelistedAddress(address _addressToRemove) onlyOwner external {
        whitelisted[_addressToRemove] = false;
        uint256 length = _whitelistAddresses.length;
        for(uint256 i = 0; i < length; i++) {
            if (_addressToRemove == _whitelistAddresses[i]) {
                if(1 < _whitelistAddresses.length && i < length-1) {
                    _whitelistAddresses[i] = _whitelistAddresses[length-1];
                }
                delete _whitelistAddresses[length-1];
                _whitelistAddresses.pop();

                break;
            }
        }
    }

    function withdraw() public payable onlyOwner {
        (bool success, ) = payable(owner()).call{value: address(this).balance}("");
        require(success);
    }

    function isWhitelisted(address _address) public view returns (bool) {
        return whitelisted[_address];
    }
}
